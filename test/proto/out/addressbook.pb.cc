// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto

#include "addressbook.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace xpilot {
namespace sr2_0 {
namespace proto {
class ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config>
      _instance;
} _Config_default_instance_;
class driving_configDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<driving_config>
      _instance;
} _driving_config_default_instance_;
class parking_configDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<parking_config>
      _instance;
} _parking_config_default_instance_;
class tfl_blink_suppress_strategyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<tfl_blink_suppress_strategy>
      _instance;
} _tfl_blink_suppress_strategy_default_instance_;
class intersection_recognition_strategyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<intersection_recognition_strategy>
      _instance;
} _intersection_recognition_strategy_default_instance_;
class drive_into_conditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<drive_into_condition>
      _instance;
} _drive_into_condition_default_instance_;
class drive_out_conditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<drive_out_condition>
      _instance;
} _drive_out_condition_default_instance_;
class signal_light_status_strategyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<signal_light_status_strategy>
      _instance;
} _signal_light_status_strategy_default_instance_;
class cache_pool_dynamic_strategyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cache_pool_dynamic_strategy>
      _instance;
} _cache_pool_dynamic_strategy_default_instance_;
class cache_pool_static_strategyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cache_pool_static_strategy>
      _instance;
} _cache_pool_static_strategy_default_instance_;
class dynamic_pose_filter_strategyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<dynamic_pose_filter_strategy>
      _instance;
} _dynamic_pose_filter_strategy_default_instance_;
class lane_line_omit_frame_strategyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<lane_line_omit_frame_strategy>
      _instance;
} _lane_line_omit_frame_strategy_default_instance_;
class low_speed_caseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<low_speed_case>
      _instance;
} _low_speed_case_default_instance_;
class static_caseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<static_case>
      _instance;
} _static_case_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
namespace protobuf_addressbook_2eproto {
void InitDefaultsConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_addressbook_2eproto::InitDefaultsdriving_config();
  protobuf_addressbook_2eproto::InitDefaultsparking_config();
  {
    void* ptr = &::xpilot::sr2_0::proto::_Config_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::Config::InitAsDefaultInstance();
}

void InitDefaultsConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConfigImpl);
}

void InitDefaultsdriving_configImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_addressbook_2eproto::InitDefaultsdynamic_pose_filter_strategy();
  protobuf_addressbook_2eproto::InitDefaultscache_pool_static_strategy();
  protobuf_addressbook_2eproto::InitDefaultscache_pool_dynamic_strategy();
  protobuf_addressbook_2eproto::InitDefaultslane_line_omit_frame_strategy();
  protobuf_addressbook_2eproto::InitDefaultssignal_light_status_strategy();
  protobuf_addressbook_2eproto::InitDefaultsintersection_recognition_strategy();
  protobuf_addressbook_2eproto::InitDefaultstfl_blink_suppress_strategy();
  {
    void* ptr = &::xpilot::sr2_0::proto::_driving_config_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::driving_config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::driving_config::InitAsDefaultInstance();
}

void InitDefaultsdriving_config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsdriving_configImpl);
}

void InitDefaultsparking_configImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::xpilot::sr2_0::proto::_parking_config_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::parking_config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::parking_config::InitAsDefaultInstance();
}

void InitDefaultsparking_config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsparking_configImpl);
}

void InitDefaultstfl_blink_suppress_strategyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::xpilot::sr2_0::proto::_tfl_blink_suppress_strategy_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::tfl_blink_suppress_strategy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::tfl_blink_suppress_strategy::InitAsDefaultInstance();
}

void InitDefaultstfl_blink_suppress_strategy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultstfl_blink_suppress_strategyImpl);
}

void InitDefaultsintersection_recognition_strategyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_addressbook_2eproto::InitDefaultsdrive_into_condition();
  protobuf_addressbook_2eproto::InitDefaultsdrive_out_condition();
  {
    void* ptr = &::xpilot::sr2_0::proto::_intersection_recognition_strategy_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::intersection_recognition_strategy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::intersection_recognition_strategy::InitAsDefaultInstance();
}

void InitDefaultsintersection_recognition_strategy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsintersection_recognition_strategyImpl);
}

void InitDefaultsdrive_into_conditionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::xpilot::sr2_0::proto::_drive_into_condition_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::drive_into_condition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::drive_into_condition::InitAsDefaultInstance();
}

void InitDefaultsdrive_into_condition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsdrive_into_conditionImpl);
}

void InitDefaultsdrive_out_conditionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::xpilot::sr2_0::proto::_drive_out_condition_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::drive_out_condition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::drive_out_condition::InitAsDefaultInstance();
}

void InitDefaultsdrive_out_condition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsdrive_out_conditionImpl);
}

void InitDefaultssignal_light_status_strategyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::xpilot::sr2_0::proto::_signal_light_status_strategy_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::signal_light_status_strategy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::signal_light_status_strategy::InitAsDefaultInstance();
}

void InitDefaultssignal_light_status_strategy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultssignal_light_status_strategyImpl);
}

void InitDefaultscache_pool_dynamic_strategyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::xpilot::sr2_0::proto::_cache_pool_dynamic_strategy_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::cache_pool_dynamic_strategy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::cache_pool_dynamic_strategy::InitAsDefaultInstance();
}

void InitDefaultscache_pool_dynamic_strategy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscache_pool_dynamic_strategyImpl);
}

void InitDefaultscache_pool_static_strategyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::xpilot::sr2_0::proto::_cache_pool_static_strategy_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::cache_pool_static_strategy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::cache_pool_static_strategy::InitAsDefaultInstance();
}

void InitDefaultscache_pool_static_strategy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscache_pool_static_strategyImpl);
}

void InitDefaultsdynamic_pose_filter_strategyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::xpilot::sr2_0::proto::_dynamic_pose_filter_strategy_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::dynamic_pose_filter_strategy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::dynamic_pose_filter_strategy::InitAsDefaultInstance();
}

void InitDefaultsdynamic_pose_filter_strategy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsdynamic_pose_filter_strategyImpl);
}

void InitDefaultslane_line_omit_frame_strategyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_addressbook_2eproto::InitDefaultslow_speed_case();
  protobuf_addressbook_2eproto::InitDefaultsstatic_case();
  {
    void* ptr = &::xpilot::sr2_0::proto::_lane_line_omit_frame_strategy_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::lane_line_omit_frame_strategy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::lane_line_omit_frame_strategy::InitAsDefaultInstance();
}

void InitDefaultslane_line_omit_frame_strategy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultslane_line_omit_frame_strategyImpl);
}

void InitDefaultslow_speed_caseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::xpilot::sr2_0::proto::_low_speed_case_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::low_speed_case();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::low_speed_case::InitAsDefaultInstance();
}

void InitDefaultslow_speed_case() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultslow_speed_caseImpl);
}

void InitDefaultsstatic_caseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::xpilot::sr2_0::proto::_static_case_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::static_case();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::static_case::InitAsDefaultInstance();
}

void InitDefaultsstatic_case() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsstatic_caseImpl);
}

::google::protobuf::Metadata file_level_metadata[14];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::Config, driving_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::Config, parking_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, decision_surf_idt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, target_color_min_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, big_track_bus_min_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, log_proto_binary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, log_stat_proto_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, config_dedug_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, target_color_log_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, cdcu_func_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, dynamic_obj_filter_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, dynamic_obj_filter_log_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, kalman_filter_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, kalman_filter_q_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, yaw_filter_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, yaw_filter_debug_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, yaw_filter_lp_k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, yaw_filter_static_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, yaw_filter_frame_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, type_filter_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, type_filter_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, type_filter_following_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, lane_line_polyfit_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, dynamic_id_filter_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, dynamic_pose_filter_strategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, cache_pool_static_strategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, cache_pool_dynamic_strategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, lane_line_omit_frame_strategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, signal_light_status_strategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, intersection_recognition_strategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::driving_config, tfl_blink_suppress_strategy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::parking_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::tfl_blink_suppress_strategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::tfl_blink_suppress_strategy, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::tfl_blink_suppress_strategy, frame_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::intersection_recognition_strategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::intersection_recognition_strategy, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::intersection_recognition_strategy, debug_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::intersection_recognition_strategy, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::intersection_recognition_strategy, drive_into_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::intersection_recognition_strategy, drive_out_condition_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::drive_into_condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::drive_into_condition, dist_road_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::drive_into_condition, length_road_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::drive_into_condition, width_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::drive_into_condition, length_search_laneline_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::drive_out_condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::drive_out_condition, dist_ego_drive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::signal_light_status_strategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::signal_light_status_strategy, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::signal_light_status_strategy, yaw_dirction_debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::signal_light_status_strategy, yaw_dirction_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::signal_light_status_strategy, yaw_dirction_right_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, yaw_dirction_debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, yaw_dirction_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, yaw_dirction_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, run_cache_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, stop_cache_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, self_vehicle_stop_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, union_rate_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, update_max_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, update_max_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, check_delta_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy, check_delta_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_static_strategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_static_strategy, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_static_strategy, open_sod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_static_strategy, cache_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_static_strategy, min_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_static_strategy, check_delta_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::cache_pool_static_strategy, check_delta_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::dynamic_pose_filter_strategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::dynamic_pose_filter_strategy, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::dynamic_pose_filter_strategy, cache_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::dynamic_pose_filter_strategy, vehicle_stop_speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::lane_line_omit_frame_strategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::lane_line_omit_frame_strategy, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::lane_line_omit_frame_strategy, low_speed_case_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::lane_line_omit_frame_strategy, static_case_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::low_speed_case, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::low_speed_case, frame_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::low_speed_case, speed_ceiling_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::static_case, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xpilot::sr2_0::proto::static_case, frame_count_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xpilot::sr2_0::proto::Config)},
  { 7, -1, sizeof(::xpilot::sr2_0::proto::driving_config)},
  { 41, -1, sizeof(::xpilot::sr2_0::proto::parking_config)},
  { 46, -1, sizeof(::xpilot::sr2_0::proto::tfl_blink_suppress_strategy)},
  { 53, -1, sizeof(::xpilot::sr2_0::proto::intersection_recognition_strategy)},
  { 63, -1, sizeof(::xpilot::sr2_0::proto::drive_into_condition)},
  { 72, -1, sizeof(::xpilot::sr2_0::proto::drive_out_condition)},
  { 78, -1, sizeof(::xpilot::sr2_0::proto::signal_light_status_strategy)},
  { 87, -1, sizeof(::xpilot::sr2_0::proto::cache_pool_dynamic_strategy)},
  { 104, -1, sizeof(::xpilot::sr2_0::proto::cache_pool_static_strategy)},
  { 115, -1, sizeof(::xpilot::sr2_0::proto::dynamic_pose_filter_strategy)},
  { 123, -1, sizeof(::xpilot::sr2_0::proto::lane_line_omit_frame_strategy)},
  { 131, -1, sizeof(::xpilot::sr2_0::proto::low_speed_case)},
  { 138, -1, sizeof(::xpilot::sr2_0::proto::static_case)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_driving_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_parking_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_tfl_blink_suppress_strategy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_intersection_recognition_strategy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_drive_into_condition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_drive_out_condition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_signal_light_status_strategy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_cache_pool_dynamic_strategy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_cache_pool_static_strategy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_dynamic_pose_filter_strategy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_lane_line_omit_frame_strategy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_low_speed_case_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xpilot::sr2_0::proto::_static_case_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "addressbook.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021addressbook.proto\022\022xpilot.sr2_0.proto\""
      "\200\001\n\006Config\022:\n\016driving_config\030\001 \001(\0132\".xpi"
      "lot.sr2_0.proto.driving_config\022:\n\016parkin"
      "g_config\030\002 \001(\0132\".xpilot.sr2_0.proto.park"
      "ing_config\"\377\t\n\016driving_config\022\031\n\021decisio"
      "n_surf_idt\030\001 \001(\002\022\035\n\025target_color_min_dis"
      "t\030\002 \001(\002\022 \n\030big_track_bus_min_length\030\003 \001("
      "\002\022\030\n\020log_proto_binary\030\004 \001(\010\022\033\n\023log_stat_"
      "proto_size\030\005 \001(\010\022\030\n\020config_dedug_log\030\006 \001"
      "(\010\022\035\n\025target_color_log_open\030\007 \001(\010\022\027\n\017cdc"
      "u_func_check\030\010 \001(\010\022\037\n\027dynamic_obj_filter"
      "_mode\030\t \001(\r\022#\n\033dynamic_obj_filter_log_op"
      "en\030\n \001(\010\022\027\n\017kalman_filter_R\030\013 \001(\002\022\027\n\017kal"
      "man_filter_Q\030\014 \001(\002\022\027\n\017yaw_filter_open\030\r "
      "\001(\010\022\033\n\023yaw_filter_debug_id\030\016 \001(\r\022\027\n\017yaw_"
      "filter_lp_k\030\017 \001(\002\022\035\n\025yaw_filter_static_v"
      "el\030\020 \001(\002\022\034\n\024yaw_filter_frame_num\030\021 \001(\r\022\030"
      "\n\020type_filter_open\030\022 \001(\010\022\031\n\021type_filter_"
      "count\030\023 \001(\r\022#\n\033type_filter_following_cou"
      "nt\030\024 \001(\r\022\036\n\026lane_line_polyfit_open\030\025 \001(\010"
      "\022\036\n\026dynamic_id_filter_open\030\026 \001(\010\022V\n\034dyna"
      "mic_pose_filter_strategy\030\027 \001(\01320.xpilot."
      "sr2_0.proto.dynamic_pose_filter_strategy"
      "\022R\n\032cache_pool_static_strategy\030\030 \001(\0132..x"
      "pilot.sr2_0.proto.cache_pool_static_stra"
      "tegy\022T\n\033cache_pool_dynamic_strategy\030\031 \001("
      "\0132/.xpilot.sr2_0.proto.cache_pool_dynami"
      "c_strategy\022X\n\035lane_line_omit_frame_strat"
      "egy\030\032 \001(\01321.xpilot.sr2_0.proto.lane_line"
      "_omit_frame_strategy\022V\n\034signal_light_sta"
      "tus_strategy\030\033 \001(\01320.xpilot.sr2_0.proto."
      "signal_light_status_strategy\022`\n!intersec"
      "tion_recognition_strategy\030\034 \001(\01325.xpilot"
      ".sr2_0.proto.intersection_recognition_st"
      "rategy\022T\n\033tfl_blink_suppress_strategy\030\035 "
      "\001(\0132/.xpilot.sr2_0.proto.tfl_blink_suppr"
      "ess_strategy\"\020\n\016parking_config\"B\n\033tfl_bl"
      "ink_suppress_strategy\022\016\n\006enable\030\001 \001(\010\022\023\n"
      "\013frame_count\030\002 \001(\r\"\351\001\n!intersection_reco"
      "gnition_strategy\022\016\n\006enable\030\001 \001(\010\022\021\n\tdebu"
      "g_log\030\002 \001(\010\022\023\n\013speed_limit\030\003 \001(\002\022F\n\024driv"
      "e_into_condition\030\004 \001(\0132(.xpilot.sr2_0.pr"
      "oto.drive_into_condition\022D\n\023drive_out_co"
      "ndition\030\005 \001(\0132\'.xpilot.sr2_0.proto.drive"
      "_out_condition\"|\n\024drive_into_condition\022\026"
      "\n\016dist_road_mark\030\001 \001(\002\022\030\n\020length_road_ma"
      "rk\030\002 \001(\002\022\022\n\nwidth_lane\030\003 \001(\002\022\036\n\026length_s"
      "earch_laneline\030\004 \001(\r\"-\n\023drive_out_condit"
      "ion\022\026\n\016dist_ego_drive\030\001 \001(\r\"\177\n\034signal_li"
      "ght_status_strategy\022\014\n\004open\030\001 \001(\010\022\032\n\022yaw"
      "_dirction_debug\030\002 \001(\010\022\031\n\021yaw_dirction_le"
      "ft\030\003 \001(\002\022\032\n\022yaw_dirction_right\030\004 \001(\002\"\330\002\n"
      "\033cache_pool_dynamic_strategy\022\014\n\004open\030\001 \001"
      "(\010\022\032\n\022yaw_dirction_debug\030\002 \001(\010\022\031\n\021yaw_di"
      "rction_left\030\003 \001(\002\022\032\n\022yaw_dirction_right\030"
      "\004 \001(\002\022\027\n\017run_cache_count\030\005 \001(\r\022\030\n\020stop_c"
      "ache_count\030\006 \001(\r\022\037\n\027self_vehicle_stop_sp"
      "eed\030\007 \001(\002\022\026\n\016union_rate_min\030\010 \001(\002\022\033\n\023upd"
      "ate_max_velocity\030\t \001(\002\022\033\n\023update_max_dis"
      "tance\030\n \001(\002\022\030\n\020check_delta_dist\030\013 \001(\002\022\030\n"
      "\020check_delta_time\030\014 \001(\002\"\227\001\n\032cache_pool_s"
      "tatic_strategy\022\014\n\004open\030\001 \001(\010\022\020\n\010open_sod"
      "\030\002 \001(\010\022\023\n\013cache_count\030\003 \001(\r\022\020\n\010min_dist\030"
      "\004 \001(\002\022\030\n\020check_delta_dist\030\005 \001(\002\022\030\n\020check"
      "_delta_time\030\006 \001(\002\"]\n\034dynamic_pose_filter"
      "_strategy\022\014\n\004open\030\001 \001(\010\022\023\n\013cache_count\030\002"
      " \001(\r\022\032\n\022vehicle_stop_speed\030\003 \001(\002\"\241\001\n\035lan"
      "e_line_omit_frame_strategy\022\016\n\006enable\030\001 \001"
      "(\010\022:\n\016low_speed_case\030\002 \001(\0132\".xpilot.sr2_"
      "0.proto.low_speed_case\0224\n\013static_case\030\003 "
      "\001(\0132\037.xpilot.sr2_0.proto.static_case\"<\n\016"
      "low_speed_case\022\023\n\013frame_count\030\001 \001(\r\022\025\n\rs"
      "peed_ceiling\030\002 \001(\002\"\"\n\013static_case\022\023\n\013fra"
      "me_count\030\001 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2942);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "addressbook.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_addressbook_2eproto
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

void Config::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_Config_default_instance_._instance.get_mutable()->driving_config_ = const_cast< ::xpilot::sr2_0::proto::driving_config*>(
      ::xpilot::sr2_0::proto::driving_config::internal_default_instance());
  ::xpilot::sr2_0::proto::_Config_default_instance_._instance.get_mutable()->parking_config_ = const_cast< ::xpilot::sr2_0::proto::parking_config*>(
      ::xpilot::sr2_0::proto::parking_config::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kDrivingConfigFieldNumber;
const int Config::kParkingConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultsConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_driving_config()) {
    driving_config_ = new ::xpilot::sr2_0::proto::driving_config(*from.driving_config_);
  } else {
    driving_config_ = NULL;
  }
  if (from.has_parking_config()) {
    parking_config_ = new ::xpilot::sr2_0::proto::parking_config(*from.parking_config_);
  } else {
    parking_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.Config)
}

void Config::SharedCtor() {
  ::memset(&driving_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_config_) -
      reinterpret_cast<char*>(&driving_config_)) + sizeof(parking_config_));
  _cached_size_ = 0;
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != internal_default_instance()) delete driving_config_;
  if (this != internal_default_instance()) delete parking_config_;
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config& Config::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultsConfig();
  return *internal_default_instance();
}

Config* Config::New(::google::protobuf::Arena* arena) const {
  Config* n = new Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && driving_config_ != NULL) {
    delete driving_config_;
  }
  driving_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && parking_config_ != NULL) {
    delete parking_config_;
  }
  parking_config_ = NULL;
  _internal_metadata_.Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xpilot.sr2_0.proto.driving_config driving_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_driving_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xpilot.sr2_0.proto.parking_config parking_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parking_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.driving_config driving_config = 1;
  if (this->has_driving_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->driving_config_, output);
  }

  // .xpilot.sr2_0.proto.parking_config parking_config = 2;
  if (this->has_parking_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->parking_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.driving_config driving_config = 1;
  if (this->has_driving_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->driving_config_, deterministic, target);
  }

  // .xpilot.sr2_0.proto.parking_config parking_config = 2;
  if (this->has_parking_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->parking_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .xpilot.sr2_0.proto.driving_config driving_config = 1;
  if (this->has_driving_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->driving_config_);
  }

  // .xpilot.sr2_0.proto.parking_config parking_config = 2;
  if (this->has_parking_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->parking_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_driving_config()) {
    mutable_driving_config()->::xpilot::sr2_0::proto::driving_config::MergeFrom(from.driving_config());
  }
  if (from.has_parking_config()) {
    mutable_parking_config()->::xpilot::sr2_0::proto::parking_config::MergeFrom(from.parking_config());
  }
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  using std::swap;
  swap(driving_config_, other->driving_config_);
  swap(parking_config_, other->parking_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void driving_config::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_driving_config_default_instance_._instance.get_mutable()->dynamic_pose_filter_strategy_ = const_cast< ::xpilot::sr2_0::proto::dynamic_pose_filter_strategy*>(
      ::xpilot::sr2_0::proto::dynamic_pose_filter_strategy::internal_default_instance());
  ::xpilot::sr2_0::proto::_driving_config_default_instance_._instance.get_mutable()->cache_pool_static_strategy_ = const_cast< ::xpilot::sr2_0::proto::cache_pool_static_strategy*>(
      ::xpilot::sr2_0::proto::cache_pool_static_strategy::internal_default_instance());
  ::xpilot::sr2_0::proto::_driving_config_default_instance_._instance.get_mutable()->cache_pool_dynamic_strategy_ = const_cast< ::xpilot::sr2_0::proto::cache_pool_dynamic_strategy*>(
      ::xpilot::sr2_0::proto::cache_pool_dynamic_strategy::internal_default_instance());
  ::xpilot::sr2_0::proto::_driving_config_default_instance_._instance.get_mutable()->lane_line_omit_frame_strategy_ = const_cast< ::xpilot::sr2_0::proto::lane_line_omit_frame_strategy*>(
      ::xpilot::sr2_0::proto::lane_line_omit_frame_strategy::internal_default_instance());
  ::xpilot::sr2_0::proto::_driving_config_default_instance_._instance.get_mutable()->signal_light_status_strategy_ = const_cast< ::xpilot::sr2_0::proto::signal_light_status_strategy*>(
      ::xpilot::sr2_0::proto::signal_light_status_strategy::internal_default_instance());
  ::xpilot::sr2_0::proto::_driving_config_default_instance_._instance.get_mutable()->intersection_recognition_strategy_ = const_cast< ::xpilot::sr2_0::proto::intersection_recognition_strategy*>(
      ::xpilot::sr2_0::proto::intersection_recognition_strategy::internal_default_instance());
  ::xpilot::sr2_0::proto::_driving_config_default_instance_._instance.get_mutable()->tfl_blink_suppress_strategy_ = const_cast< ::xpilot::sr2_0::proto::tfl_blink_suppress_strategy*>(
      ::xpilot::sr2_0::proto::tfl_blink_suppress_strategy::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int driving_config::kDecisionSurfIdtFieldNumber;
const int driving_config::kTargetColorMinDistFieldNumber;
const int driving_config::kBigTrackBusMinLengthFieldNumber;
const int driving_config::kLogProtoBinaryFieldNumber;
const int driving_config::kLogStatProtoSizeFieldNumber;
const int driving_config::kConfigDedugLogFieldNumber;
const int driving_config::kTargetColorLogOpenFieldNumber;
const int driving_config::kCdcuFuncCheckFieldNumber;
const int driving_config::kDynamicObjFilterModeFieldNumber;
const int driving_config::kDynamicObjFilterLogOpenFieldNumber;
const int driving_config::kKalmanFilterRFieldNumber;
const int driving_config::kKalmanFilterQFieldNumber;
const int driving_config::kYawFilterOpenFieldNumber;
const int driving_config::kYawFilterDebugIdFieldNumber;
const int driving_config::kYawFilterLpKFieldNumber;
const int driving_config::kYawFilterStaticVelFieldNumber;
const int driving_config::kYawFilterFrameNumFieldNumber;
const int driving_config::kTypeFilterOpenFieldNumber;
const int driving_config::kTypeFilterCountFieldNumber;
const int driving_config::kTypeFilterFollowingCountFieldNumber;
const int driving_config::kLaneLinePolyfitOpenFieldNumber;
const int driving_config::kDynamicIdFilterOpenFieldNumber;
const int driving_config::kDynamicPoseFilterStrategyFieldNumber;
const int driving_config::kCachePoolStaticStrategyFieldNumber;
const int driving_config::kCachePoolDynamicStrategyFieldNumber;
const int driving_config::kLaneLineOmitFrameStrategyFieldNumber;
const int driving_config::kSignalLightStatusStrategyFieldNumber;
const int driving_config::kIntersectionRecognitionStrategyFieldNumber;
const int driving_config::kTflBlinkSuppressStrategyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

driving_config::driving_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultsdriving_config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.driving_config)
}
driving_config::driving_config(const driving_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dynamic_pose_filter_strategy()) {
    dynamic_pose_filter_strategy_ = new ::xpilot::sr2_0::proto::dynamic_pose_filter_strategy(*from.dynamic_pose_filter_strategy_);
  } else {
    dynamic_pose_filter_strategy_ = NULL;
  }
  if (from.has_cache_pool_static_strategy()) {
    cache_pool_static_strategy_ = new ::xpilot::sr2_0::proto::cache_pool_static_strategy(*from.cache_pool_static_strategy_);
  } else {
    cache_pool_static_strategy_ = NULL;
  }
  if (from.has_cache_pool_dynamic_strategy()) {
    cache_pool_dynamic_strategy_ = new ::xpilot::sr2_0::proto::cache_pool_dynamic_strategy(*from.cache_pool_dynamic_strategy_);
  } else {
    cache_pool_dynamic_strategy_ = NULL;
  }
  if (from.has_lane_line_omit_frame_strategy()) {
    lane_line_omit_frame_strategy_ = new ::xpilot::sr2_0::proto::lane_line_omit_frame_strategy(*from.lane_line_omit_frame_strategy_);
  } else {
    lane_line_omit_frame_strategy_ = NULL;
  }
  if (from.has_signal_light_status_strategy()) {
    signal_light_status_strategy_ = new ::xpilot::sr2_0::proto::signal_light_status_strategy(*from.signal_light_status_strategy_);
  } else {
    signal_light_status_strategy_ = NULL;
  }
  if (from.has_intersection_recognition_strategy()) {
    intersection_recognition_strategy_ = new ::xpilot::sr2_0::proto::intersection_recognition_strategy(*from.intersection_recognition_strategy_);
  } else {
    intersection_recognition_strategy_ = NULL;
  }
  if (from.has_tfl_blink_suppress_strategy()) {
    tfl_blink_suppress_strategy_ = new ::xpilot::sr2_0::proto::tfl_blink_suppress_strategy(*from.tfl_blink_suppress_strategy_);
  } else {
    tfl_blink_suppress_strategy_ = NULL;
  }
  ::memcpy(&decision_surf_idt_, &from.decision_surf_idt_,
    static_cast<size_t>(reinterpret_cast<char*>(&dynamic_id_filter_open_) -
    reinterpret_cast<char*>(&decision_surf_idt_)) + sizeof(dynamic_id_filter_open_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.driving_config)
}

void driving_config::SharedCtor() {
  ::memset(&dynamic_pose_filter_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dynamic_id_filter_open_) -
      reinterpret_cast<char*>(&dynamic_pose_filter_strategy_)) + sizeof(dynamic_id_filter_open_));
  _cached_size_ = 0;
}

driving_config::~driving_config() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.driving_config)
  SharedDtor();
}

void driving_config::SharedDtor() {
  if (this != internal_default_instance()) delete dynamic_pose_filter_strategy_;
  if (this != internal_default_instance()) delete cache_pool_static_strategy_;
  if (this != internal_default_instance()) delete cache_pool_dynamic_strategy_;
  if (this != internal_default_instance()) delete lane_line_omit_frame_strategy_;
  if (this != internal_default_instance()) delete signal_light_status_strategy_;
  if (this != internal_default_instance()) delete intersection_recognition_strategy_;
  if (this != internal_default_instance()) delete tfl_blink_suppress_strategy_;
}

void driving_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* driving_config::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const driving_config& driving_config::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultsdriving_config();
  return *internal_default_instance();
}

driving_config* driving_config::New(::google::protobuf::Arena* arena) const {
  driving_config* n = new driving_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void driving_config::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.driving_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && dynamic_pose_filter_strategy_ != NULL) {
    delete dynamic_pose_filter_strategy_;
  }
  dynamic_pose_filter_strategy_ = NULL;
  if (GetArenaNoVirtual() == NULL && cache_pool_static_strategy_ != NULL) {
    delete cache_pool_static_strategy_;
  }
  cache_pool_static_strategy_ = NULL;
  if (GetArenaNoVirtual() == NULL && cache_pool_dynamic_strategy_ != NULL) {
    delete cache_pool_dynamic_strategy_;
  }
  cache_pool_dynamic_strategy_ = NULL;
  if (GetArenaNoVirtual() == NULL && lane_line_omit_frame_strategy_ != NULL) {
    delete lane_line_omit_frame_strategy_;
  }
  lane_line_omit_frame_strategy_ = NULL;
  if (GetArenaNoVirtual() == NULL && signal_light_status_strategy_ != NULL) {
    delete signal_light_status_strategy_;
  }
  signal_light_status_strategy_ = NULL;
  if (GetArenaNoVirtual() == NULL && intersection_recognition_strategy_ != NULL) {
    delete intersection_recognition_strategy_;
  }
  intersection_recognition_strategy_ = NULL;
  if (GetArenaNoVirtual() == NULL && tfl_blink_suppress_strategy_ != NULL) {
    delete tfl_blink_suppress_strategy_;
  }
  tfl_blink_suppress_strategy_ = NULL;
  ::memset(&decision_surf_idt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dynamic_id_filter_open_) -
      reinterpret_cast<char*>(&decision_surf_idt_)) + sizeof(dynamic_id_filter_open_));
  _internal_metadata_.Clear();
}

bool driving_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.driving_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float decision_surf_idt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decision_surf_idt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float target_color_min_dist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_color_min_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float big_track_bus_min_length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &big_track_bus_min_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool log_proto_binary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_proto_binary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool log_stat_proto_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_stat_proto_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool config_dedug_log = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &config_dedug_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool target_color_log_open = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_color_log_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cdcu_func_check = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cdcu_func_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dynamic_obj_filter_mode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dynamic_obj_filter_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dynamic_obj_filter_log_open = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dynamic_obj_filter_log_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float kalman_filter_R = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kalman_filter_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float kalman_filter_Q = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kalman_filter_q_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool yaw_filter_open = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yaw_filter_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 yaw_filter_debug_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaw_filter_debug_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_filter_lp_k = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_filter_lp_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_filter_static_vel = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_filter_static_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 yaw_filter_frame_num = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaw_filter_frame_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool type_filter_open = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_filter_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type_filter_count = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_filter_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type_filter_following_count = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_filter_following_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lane_line_polyfit_open = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_line_polyfit_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dynamic_id_filter_open = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dynamic_id_filter_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xpilot.sr2_0.proto.dynamic_pose_filter_strategy dynamic_pose_filter_strategy = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamic_pose_filter_strategy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xpilot.sr2_0.proto.cache_pool_static_strategy cache_pool_static_strategy = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cache_pool_static_strategy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xpilot.sr2_0.proto.cache_pool_dynamic_strategy cache_pool_dynamic_strategy = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cache_pool_dynamic_strategy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xpilot.sr2_0.proto.lane_line_omit_frame_strategy lane_line_omit_frame_strategy = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_line_omit_frame_strategy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xpilot.sr2_0.proto.signal_light_status_strategy signal_light_status_strategy = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signal_light_status_strategy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xpilot.sr2_0.proto.intersection_recognition_strategy intersection_recognition_strategy = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intersection_recognition_strategy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xpilot.sr2_0.proto.tfl_blink_suppress_strategy tfl_blink_suppress_strategy = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tfl_blink_suppress_strategy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.driving_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.driving_config)
  return false;
#undef DO_
}

void driving_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.driving_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float decision_surf_idt = 1;
  if (this->decision_surf_idt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->decision_surf_idt(), output);
  }

  // float target_color_min_dist = 2;
  if (this->target_color_min_dist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->target_color_min_dist(), output);
  }

  // float big_track_bus_min_length = 3;
  if (this->big_track_bus_min_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->big_track_bus_min_length(), output);
  }

  // bool log_proto_binary = 4;
  if (this->log_proto_binary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->log_proto_binary(), output);
  }

  // bool log_stat_proto_size = 5;
  if (this->log_stat_proto_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->log_stat_proto_size(), output);
  }

  // bool config_dedug_log = 6;
  if (this->config_dedug_log() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->config_dedug_log(), output);
  }

  // bool target_color_log_open = 7;
  if (this->target_color_log_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->target_color_log_open(), output);
  }

  // bool cdcu_func_check = 8;
  if (this->cdcu_func_check() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->cdcu_func_check(), output);
  }

  // uint32 dynamic_obj_filter_mode = 9;
  if (this->dynamic_obj_filter_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dynamic_obj_filter_mode(), output);
  }

  // bool dynamic_obj_filter_log_open = 10;
  if (this->dynamic_obj_filter_log_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->dynamic_obj_filter_log_open(), output);
  }

  // float kalman_filter_R = 11;
  if (this->kalman_filter_r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->kalman_filter_r(), output);
  }

  // float kalman_filter_Q = 12;
  if (this->kalman_filter_q() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->kalman_filter_q(), output);
  }

  // bool yaw_filter_open = 13;
  if (this->yaw_filter_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->yaw_filter_open(), output);
  }

  // uint32 yaw_filter_debug_id = 14;
  if (this->yaw_filter_debug_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->yaw_filter_debug_id(), output);
  }

  // float yaw_filter_lp_k = 15;
  if (this->yaw_filter_lp_k() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->yaw_filter_lp_k(), output);
  }

  // float yaw_filter_static_vel = 16;
  if (this->yaw_filter_static_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->yaw_filter_static_vel(), output);
  }

  // uint32 yaw_filter_frame_num = 17;
  if (this->yaw_filter_frame_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->yaw_filter_frame_num(), output);
  }

  // bool type_filter_open = 18;
  if (this->type_filter_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->type_filter_open(), output);
  }

  // uint32 type_filter_count = 19;
  if (this->type_filter_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->type_filter_count(), output);
  }

  // uint32 type_filter_following_count = 20;
  if (this->type_filter_following_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->type_filter_following_count(), output);
  }

  // bool lane_line_polyfit_open = 21;
  if (this->lane_line_polyfit_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->lane_line_polyfit_open(), output);
  }

  // bool dynamic_id_filter_open = 22;
  if (this->dynamic_id_filter_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->dynamic_id_filter_open(), output);
  }

  // .xpilot.sr2_0.proto.dynamic_pose_filter_strategy dynamic_pose_filter_strategy = 23;
  if (this->has_dynamic_pose_filter_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->dynamic_pose_filter_strategy_, output);
  }

  // .xpilot.sr2_0.proto.cache_pool_static_strategy cache_pool_static_strategy = 24;
  if (this->has_cache_pool_static_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->cache_pool_static_strategy_, output);
  }

  // .xpilot.sr2_0.proto.cache_pool_dynamic_strategy cache_pool_dynamic_strategy = 25;
  if (this->has_cache_pool_dynamic_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->cache_pool_dynamic_strategy_, output);
  }

  // .xpilot.sr2_0.proto.lane_line_omit_frame_strategy lane_line_omit_frame_strategy = 26;
  if (this->has_lane_line_omit_frame_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->lane_line_omit_frame_strategy_, output);
  }

  // .xpilot.sr2_0.proto.signal_light_status_strategy signal_light_status_strategy = 27;
  if (this->has_signal_light_status_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->signal_light_status_strategy_, output);
  }

  // .xpilot.sr2_0.proto.intersection_recognition_strategy intersection_recognition_strategy = 28;
  if (this->has_intersection_recognition_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->intersection_recognition_strategy_, output);
  }

  // .xpilot.sr2_0.proto.tfl_blink_suppress_strategy tfl_blink_suppress_strategy = 29;
  if (this->has_tfl_blink_suppress_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->tfl_blink_suppress_strategy_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.driving_config)
}

::google::protobuf::uint8* driving_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.driving_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float decision_surf_idt = 1;
  if (this->decision_surf_idt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->decision_surf_idt(), target);
  }

  // float target_color_min_dist = 2;
  if (this->target_color_min_dist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->target_color_min_dist(), target);
  }

  // float big_track_bus_min_length = 3;
  if (this->big_track_bus_min_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->big_track_bus_min_length(), target);
  }

  // bool log_proto_binary = 4;
  if (this->log_proto_binary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->log_proto_binary(), target);
  }

  // bool log_stat_proto_size = 5;
  if (this->log_stat_proto_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->log_stat_proto_size(), target);
  }

  // bool config_dedug_log = 6;
  if (this->config_dedug_log() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->config_dedug_log(), target);
  }

  // bool target_color_log_open = 7;
  if (this->target_color_log_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->target_color_log_open(), target);
  }

  // bool cdcu_func_check = 8;
  if (this->cdcu_func_check() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->cdcu_func_check(), target);
  }

  // uint32 dynamic_obj_filter_mode = 9;
  if (this->dynamic_obj_filter_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dynamic_obj_filter_mode(), target);
  }

  // bool dynamic_obj_filter_log_open = 10;
  if (this->dynamic_obj_filter_log_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->dynamic_obj_filter_log_open(), target);
  }

  // float kalman_filter_R = 11;
  if (this->kalman_filter_r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->kalman_filter_r(), target);
  }

  // float kalman_filter_Q = 12;
  if (this->kalman_filter_q() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->kalman_filter_q(), target);
  }

  // bool yaw_filter_open = 13;
  if (this->yaw_filter_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->yaw_filter_open(), target);
  }

  // uint32 yaw_filter_debug_id = 14;
  if (this->yaw_filter_debug_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->yaw_filter_debug_id(), target);
  }

  // float yaw_filter_lp_k = 15;
  if (this->yaw_filter_lp_k() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->yaw_filter_lp_k(), target);
  }

  // float yaw_filter_static_vel = 16;
  if (this->yaw_filter_static_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->yaw_filter_static_vel(), target);
  }

  // uint32 yaw_filter_frame_num = 17;
  if (this->yaw_filter_frame_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->yaw_filter_frame_num(), target);
  }

  // bool type_filter_open = 18;
  if (this->type_filter_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->type_filter_open(), target);
  }

  // uint32 type_filter_count = 19;
  if (this->type_filter_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->type_filter_count(), target);
  }

  // uint32 type_filter_following_count = 20;
  if (this->type_filter_following_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->type_filter_following_count(), target);
  }

  // bool lane_line_polyfit_open = 21;
  if (this->lane_line_polyfit_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->lane_line_polyfit_open(), target);
  }

  // bool dynamic_id_filter_open = 22;
  if (this->dynamic_id_filter_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->dynamic_id_filter_open(), target);
  }

  // .xpilot.sr2_0.proto.dynamic_pose_filter_strategy dynamic_pose_filter_strategy = 23;
  if (this->has_dynamic_pose_filter_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, *this->dynamic_pose_filter_strategy_, deterministic, target);
  }

  // .xpilot.sr2_0.proto.cache_pool_static_strategy cache_pool_static_strategy = 24;
  if (this->has_cache_pool_static_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, *this->cache_pool_static_strategy_, deterministic, target);
  }

  // .xpilot.sr2_0.proto.cache_pool_dynamic_strategy cache_pool_dynamic_strategy = 25;
  if (this->has_cache_pool_dynamic_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, *this->cache_pool_dynamic_strategy_, deterministic, target);
  }

  // .xpilot.sr2_0.proto.lane_line_omit_frame_strategy lane_line_omit_frame_strategy = 26;
  if (this->has_lane_line_omit_frame_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, *this->lane_line_omit_frame_strategy_, deterministic, target);
  }

  // .xpilot.sr2_0.proto.signal_light_status_strategy signal_light_status_strategy = 27;
  if (this->has_signal_light_status_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, *this->signal_light_status_strategy_, deterministic, target);
  }

  // .xpilot.sr2_0.proto.intersection_recognition_strategy intersection_recognition_strategy = 28;
  if (this->has_intersection_recognition_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, *this->intersection_recognition_strategy_, deterministic, target);
  }

  // .xpilot.sr2_0.proto.tfl_blink_suppress_strategy tfl_blink_suppress_strategy = 29;
  if (this->has_tfl_blink_suppress_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, *this->tfl_blink_suppress_strategy_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.driving_config)
  return target;
}

size_t driving_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.driving_config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .xpilot.sr2_0.proto.dynamic_pose_filter_strategy dynamic_pose_filter_strategy = 23;
  if (this->has_dynamic_pose_filter_strategy()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dynamic_pose_filter_strategy_);
  }

  // .xpilot.sr2_0.proto.cache_pool_static_strategy cache_pool_static_strategy = 24;
  if (this->has_cache_pool_static_strategy()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cache_pool_static_strategy_);
  }

  // .xpilot.sr2_0.proto.cache_pool_dynamic_strategy cache_pool_dynamic_strategy = 25;
  if (this->has_cache_pool_dynamic_strategy()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cache_pool_dynamic_strategy_);
  }

  // .xpilot.sr2_0.proto.lane_line_omit_frame_strategy lane_line_omit_frame_strategy = 26;
  if (this->has_lane_line_omit_frame_strategy()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lane_line_omit_frame_strategy_);
  }

  // .xpilot.sr2_0.proto.signal_light_status_strategy signal_light_status_strategy = 27;
  if (this->has_signal_light_status_strategy()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->signal_light_status_strategy_);
  }

  // .xpilot.sr2_0.proto.intersection_recognition_strategy intersection_recognition_strategy = 28;
  if (this->has_intersection_recognition_strategy()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->intersection_recognition_strategy_);
  }

  // .xpilot.sr2_0.proto.tfl_blink_suppress_strategy tfl_blink_suppress_strategy = 29;
  if (this->has_tfl_blink_suppress_strategy()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tfl_blink_suppress_strategy_);
  }

  // float decision_surf_idt = 1;
  if (this->decision_surf_idt() != 0) {
    total_size += 1 + 4;
  }

  // float target_color_min_dist = 2;
  if (this->target_color_min_dist() != 0) {
    total_size += 1 + 4;
  }

  // float big_track_bus_min_length = 3;
  if (this->big_track_bus_min_length() != 0) {
    total_size += 1 + 4;
  }

  // bool log_proto_binary = 4;
  if (this->log_proto_binary() != 0) {
    total_size += 1 + 1;
  }

  // bool log_stat_proto_size = 5;
  if (this->log_stat_proto_size() != 0) {
    total_size += 1 + 1;
  }

  // bool config_dedug_log = 6;
  if (this->config_dedug_log() != 0) {
    total_size += 1 + 1;
  }

  // bool target_color_log_open = 7;
  if (this->target_color_log_open() != 0) {
    total_size += 1 + 1;
  }

  // uint32 dynamic_obj_filter_mode = 9;
  if (this->dynamic_obj_filter_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dynamic_obj_filter_mode());
  }

  // float kalman_filter_R = 11;
  if (this->kalman_filter_r() != 0) {
    total_size += 1 + 4;
  }

  // float kalman_filter_Q = 12;
  if (this->kalman_filter_q() != 0) {
    total_size += 1 + 4;
  }

  // bool cdcu_func_check = 8;
  if (this->cdcu_func_check() != 0) {
    total_size += 1 + 1;
  }

  // bool dynamic_obj_filter_log_open = 10;
  if (this->dynamic_obj_filter_log_open() != 0) {
    total_size += 1 + 1;
  }

  // bool yaw_filter_open = 13;
  if (this->yaw_filter_open() != 0) {
    total_size += 1 + 1;
  }

  // bool type_filter_open = 18;
  if (this->type_filter_open() != 0) {
    total_size += 2 + 1;
  }

  // uint32 yaw_filter_debug_id = 14;
  if (this->yaw_filter_debug_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yaw_filter_debug_id());
  }

  // float yaw_filter_lp_k = 15;
  if (this->yaw_filter_lp_k() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_filter_static_vel = 16;
  if (this->yaw_filter_static_vel() != 0) {
    total_size += 2 + 4;
  }

  // uint32 yaw_filter_frame_num = 17;
  if (this->yaw_filter_frame_num() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yaw_filter_frame_num());
  }

  // uint32 type_filter_count = 19;
  if (this->type_filter_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type_filter_count());
  }

  // uint32 type_filter_following_count = 20;
  if (this->type_filter_following_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type_filter_following_count());
  }

  // bool lane_line_polyfit_open = 21;
  if (this->lane_line_polyfit_open() != 0) {
    total_size += 2 + 1;
  }

  // bool dynamic_id_filter_open = 22;
  if (this->dynamic_id_filter_open() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void driving_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.driving_config)
  GOOGLE_DCHECK_NE(&from, this);
  const driving_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const driving_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.driving_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.driving_config)
    MergeFrom(*source);
  }
}

void driving_config::MergeFrom(const driving_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.driving_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dynamic_pose_filter_strategy()) {
    mutable_dynamic_pose_filter_strategy()->::xpilot::sr2_0::proto::dynamic_pose_filter_strategy::MergeFrom(from.dynamic_pose_filter_strategy());
  }
  if (from.has_cache_pool_static_strategy()) {
    mutable_cache_pool_static_strategy()->::xpilot::sr2_0::proto::cache_pool_static_strategy::MergeFrom(from.cache_pool_static_strategy());
  }
  if (from.has_cache_pool_dynamic_strategy()) {
    mutable_cache_pool_dynamic_strategy()->::xpilot::sr2_0::proto::cache_pool_dynamic_strategy::MergeFrom(from.cache_pool_dynamic_strategy());
  }
  if (from.has_lane_line_omit_frame_strategy()) {
    mutable_lane_line_omit_frame_strategy()->::xpilot::sr2_0::proto::lane_line_omit_frame_strategy::MergeFrom(from.lane_line_omit_frame_strategy());
  }
  if (from.has_signal_light_status_strategy()) {
    mutable_signal_light_status_strategy()->::xpilot::sr2_0::proto::signal_light_status_strategy::MergeFrom(from.signal_light_status_strategy());
  }
  if (from.has_intersection_recognition_strategy()) {
    mutable_intersection_recognition_strategy()->::xpilot::sr2_0::proto::intersection_recognition_strategy::MergeFrom(from.intersection_recognition_strategy());
  }
  if (from.has_tfl_blink_suppress_strategy()) {
    mutable_tfl_blink_suppress_strategy()->::xpilot::sr2_0::proto::tfl_blink_suppress_strategy::MergeFrom(from.tfl_blink_suppress_strategy());
  }
  if (from.decision_surf_idt() != 0) {
    set_decision_surf_idt(from.decision_surf_idt());
  }
  if (from.target_color_min_dist() != 0) {
    set_target_color_min_dist(from.target_color_min_dist());
  }
  if (from.big_track_bus_min_length() != 0) {
    set_big_track_bus_min_length(from.big_track_bus_min_length());
  }
  if (from.log_proto_binary() != 0) {
    set_log_proto_binary(from.log_proto_binary());
  }
  if (from.log_stat_proto_size() != 0) {
    set_log_stat_proto_size(from.log_stat_proto_size());
  }
  if (from.config_dedug_log() != 0) {
    set_config_dedug_log(from.config_dedug_log());
  }
  if (from.target_color_log_open() != 0) {
    set_target_color_log_open(from.target_color_log_open());
  }
  if (from.dynamic_obj_filter_mode() != 0) {
    set_dynamic_obj_filter_mode(from.dynamic_obj_filter_mode());
  }
  if (from.kalman_filter_r() != 0) {
    set_kalman_filter_r(from.kalman_filter_r());
  }
  if (from.kalman_filter_q() != 0) {
    set_kalman_filter_q(from.kalman_filter_q());
  }
  if (from.cdcu_func_check() != 0) {
    set_cdcu_func_check(from.cdcu_func_check());
  }
  if (from.dynamic_obj_filter_log_open() != 0) {
    set_dynamic_obj_filter_log_open(from.dynamic_obj_filter_log_open());
  }
  if (from.yaw_filter_open() != 0) {
    set_yaw_filter_open(from.yaw_filter_open());
  }
  if (from.type_filter_open() != 0) {
    set_type_filter_open(from.type_filter_open());
  }
  if (from.yaw_filter_debug_id() != 0) {
    set_yaw_filter_debug_id(from.yaw_filter_debug_id());
  }
  if (from.yaw_filter_lp_k() != 0) {
    set_yaw_filter_lp_k(from.yaw_filter_lp_k());
  }
  if (from.yaw_filter_static_vel() != 0) {
    set_yaw_filter_static_vel(from.yaw_filter_static_vel());
  }
  if (from.yaw_filter_frame_num() != 0) {
    set_yaw_filter_frame_num(from.yaw_filter_frame_num());
  }
  if (from.type_filter_count() != 0) {
    set_type_filter_count(from.type_filter_count());
  }
  if (from.type_filter_following_count() != 0) {
    set_type_filter_following_count(from.type_filter_following_count());
  }
  if (from.lane_line_polyfit_open() != 0) {
    set_lane_line_polyfit_open(from.lane_line_polyfit_open());
  }
  if (from.dynamic_id_filter_open() != 0) {
    set_dynamic_id_filter_open(from.dynamic_id_filter_open());
  }
}

void driving_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.driving_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void driving_config::CopyFrom(const driving_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.driving_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool driving_config::IsInitialized() const {
  return true;
}

void driving_config::Swap(driving_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void driving_config::InternalSwap(driving_config* other) {
  using std::swap;
  swap(dynamic_pose_filter_strategy_, other->dynamic_pose_filter_strategy_);
  swap(cache_pool_static_strategy_, other->cache_pool_static_strategy_);
  swap(cache_pool_dynamic_strategy_, other->cache_pool_dynamic_strategy_);
  swap(lane_line_omit_frame_strategy_, other->lane_line_omit_frame_strategy_);
  swap(signal_light_status_strategy_, other->signal_light_status_strategy_);
  swap(intersection_recognition_strategy_, other->intersection_recognition_strategy_);
  swap(tfl_blink_suppress_strategy_, other->tfl_blink_suppress_strategy_);
  swap(decision_surf_idt_, other->decision_surf_idt_);
  swap(target_color_min_dist_, other->target_color_min_dist_);
  swap(big_track_bus_min_length_, other->big_track_bus_min_length_);
  swap(log_proto_binary_, other->log_proto_binary_);
  swap(log_stat_proto_size_, other->log_stat_proto_size_);
  swap(config_dedug_log_, other->config_dedug_log_);
  swap(target_color_log_open_, other->target_color_log_open_);
  swap(dynamic_obj_filter_mode_, other->dynamic_obj_filter_mode_);
  swap(kalman_filter_r_, other->kalman_filter_r_);
  swap(kalman_filter_q_, other->kalman_filter_q_);
  swap(cdcu_func_check_, other->cdcu_func_check_);
  swap(dynamic_obj_filter_log_open_, other->dynamic_obj_filter_log_open_);
  swap(yaw_filter_open_, other->yaw_filter_open_);
  swap(type_filter_open_, other->type_filter_open_);
  swap(yaw_filter_debug_id_, other->yaw_filter_debug_id_);
  swap(yaw_filter_lp_k_, other->yaw_filter_lp_k_);
  swap(yaw_filter_static_vel_, other->yaw_filter_static_vel_);
  swap(yaw_filter_frame_num_, other->yaw_filter_frame_num_);
  swap(type_filter_count_, other->type_filter_count_);
  swap(type_filter_following_count_, other->type_filter_following_count_);
  swap(lane_line_polyfit_open_, other->lane_line_polyfit_open_);
  swap(dynamic_id_filter_open_, other->dynamic_id_filter_open_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata driving_config::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void parking_config::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

parking_config::parking_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultsparking_config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.parking_config)
}
parking_config::parking_config(const parking_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.parking_config)
}

void parking_config::SharedCtor() {
  _cached_size_ = 0;
}

parking_config::~parking_config() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.parking_config)
  SharedDtor();
}

void parking_config::SharedDtor() {
}

void parking_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* parking_config::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const parking_config& parking_config::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultsparking_config();
  return *internal_default_instance();
}

parking_config* parking_config::New(::google::protobuf::Arena* arena) const {
  parking_config* n = new parking_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void parking_config::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.parking_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool parking_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.parking_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.parking_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.parking_config)
  return false;
#undef DO_
}

void parking_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.parking_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.parking_config)
}

::google::protobuf::uint8* parking_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.parking_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.parking_config)
  return target;
}

size_t parking_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.parking_config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void parking_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.parking_config)
  GOOGLE_DCHECK_NE(&from, this);
  const parking_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const parking_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.parking_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.parking_config)
    MergeFrom(*source);
  }
}

void parking_config::MergeFrom(const parking_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.parking_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void parking_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.parking_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void parking_config::CopyFrom(const parking_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.parking_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool parking_config::IsInitialized() const {
  return true;
}

void parking_config::Swap(parking_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void parking_config::InternalSwap(parking_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata parking_config::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void tfl_blink_suppress_strategy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tfl_blink_suppress_strategy::kEnableFieldNumber;
const int tfl_blink_suppress_strategy::kFrameCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tfl_blink_suppress_strategy::tfl_blink_suppress_strategy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultstfl_blink_suppress_strategy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
}
tfl_blink_suppress_strategy::tfl_blink_suppress_strategy(const tfl_blink_suppress_strategy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_count_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(frame_count_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
}

void tfl_blink_suppress_strategy::SharedCtor() {
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_count_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(frame_count_));
  _cached_size_ = 0;
}

tfl_blink_suppress_strategy::~tfl_blink_suppress_strategy() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  SharedDtor();
}

void tfl_blink_suppress_strategy::SharedDtor() {
}

void tfl_blink_suppress_strategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tfl_blink_suppress_strategy::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const tfl_blink_suppress_strategy& tfl_blink_suppress_strategy::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultstfl_blink_suppress_strategy();
  return *internal_default_instance();
}

tfl_blink_suppress_strategy* tfl_blink_suppress_strategy::New(::google::protobuf::Arena* arena) const {
  tfl_blink_suppress_strategy* n = new tfl_blink_suppress_strategy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tfl_blink_suppress_strategy::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_count_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(frame_count_));
  _internal_metadata_.Clear();
}

bool tfl_blink_suppress_strategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frame_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  return false;
#undef DO_
}

void tfl_blink_suppress_strategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // uint32 frame_count = 2;
  if (this->frame_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->frame_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
}

::google::protobuf::uint8* tfl_blink_suppress_strategy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // uint32 frame_count = 2;
  if (this->frame_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->frame_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  return target;
}

size_t tfl_blink_suppress_strategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 frame_count = 2;
  if (this->frame_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tfl_blink_suppress_strategy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  const tfl_blink_suppress_strategy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tfl_blink_suppress_strategy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
    MergeFrom(*source);
  }
}

void tfl_blink_suppress_strategy::MergeFrom(const tfl_blink_suppress_strategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.frame_count() != 0) {
    set_frame_count(from.frame_count());
  }
}

void tfl_blink_suppress_strategy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tfl_blink_suppress_strategy::CopyFrom(const tfl_blink_suppress_strategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.tfl_blink_suppress_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tfl_blink_suppress_strategy::IsInitialized() const {
  return true;
}

void tfl_blink_suppress_strategy::Swap(tfl_blink_suppress_strategy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tfl_blink_suppress_strategy::InternalSwap(tfl_blink_suppress_strategy* other) {
  using std::swap;
  swap(enable_, other->enable_);
  swap(frame_count_, other->frame_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tfl_blink_suppress_strategy::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void intersection_recognition_strategy::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_intersection_recognition_strategy_default_instance_._instance.get_mutable()->drive_into_condition_ = const_cast< ::xpilot::sr2_0::proto::drive_into_condition*>(
      ::xpilot::sr2_0::proto::drive_into_condition::internal_default_instance());
  ::xpilot::sr2_0::proto::_intersection_recognition_strategy_default_instance_._instance.get_mutable()->drive_out_condition_ = const_cast< ::xpilot::sr2_0::proto::drive_out_condition*>(
      ::xpilot::sr2_0::proto::drive_out_condition::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int intersection_recognition_strategy::kEnableFieldNumber;
const int intersection_recognition_strategy::kDebugLogFieldNumber;
const int intersection_recognition_strategy::kSpeedLimitFieldNumber;
const int intersection_recognition_strategy::kDriveIntoConditionFieldNumber;
const int intersection_recognition_strategy::kDriveOutConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

intersection_recognition_strategy::intersection_recognition_strategy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultsintersection_recognition_strategy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.intersection_recognition_strategy)
}
intersection_recognition_strategy::intersection_recognition_strategy(const intersection_recognition_strategy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drive_into_condition()) {
    drive_into_condition_ = new ::xpilot::sr2_0::proto::drive_into_condition(*from.drive_into_condition_);
  } else {
    drive_into_condition_ = NULL;
  }
  if (from.has_drive_out_condition()) {
    drive_out_condition_ = new ::xpilot::sr2_0::proto::drive_out_condition(*from.drive_out_condition_);
  } else {
    drive_out_condition_ = NULL;
  }
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(speed_limit_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.intersection_recognition_strategy)
}

void intersection_recognition_strategy::SharedCtor() {
  ::memset(&drive_into_condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&drive_into_condition_)) + sizeof(speed_limit_));
  _cached_size_ = 0;
}

intersection_recognition_strategy::~intersection_recognition_strategy() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.intersection_recognition_strategy)
  SharedDtor();
}

void intersection_recognition_strategy::SharedDtor() {
  if (this != internal_default_instance()) delete drive_into_condition_;
  if (this != internal_default_instance()) delete drive_out_condition_;
}

void intersection_recognition_strategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* intersection_recognition_strategy::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const intersection_recognition_strategy& intersection_recognition_strategy::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultsintersection_recognition_strategy();
  return *internal_default_instance();
}

intersection_recognition_strategy* intersection_recognition_strategy::New(::google::protobuf::Arena* arena) const {
  intersection_recognition_strategy* n = new intersection_recognition_strategy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void intersection_recognition_strategy::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.intersection_recognition_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && drive_into_condition_ != NULL) {
    delete drive_into_condition_;
  }
  drive_into_condition_ = NULL;
  if (GetArenaNoVirtual() == NULL && drive_out_condition_ != NULL) {
    delete drive_out_condition_;
  }
  drive_out_condition_ = NULL;
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(speed_limit_));
  _internal_metadata_.Clear();
}

bool intersection_recognition_strategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.intersection_recognition_strategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool debug_log = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xpilot.sr2_0.proto.drive_into_condition drive_into_condition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drive_into_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xpilot.sr2_0.proto.drive_out_condition drive_out_condition = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drive_out_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.intersection_recognition_strategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.intersection_recognition_strategy)
  return false;
#undef DO_
}

void intersection_recognition_strategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.intersection_recognition_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // bool debug_log = 2;
  if (this->debug_log() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->debug_log(), output);
  }

  // float speed_limit = 3;
  if (this->speed_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed_limit(), output);
  }

  // .xpilot.sr2_0.proto.drive_into_condition drive_into_condition = 4;
  if (this->has_drive_into_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->drive_into_condition_, output);
  }

  // .xpilot.sr2_0.proto.drive_out_condition drive_out_condition = 5;
  if (this->has_drive_out_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->drive_out_condition_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.intersection_recognition_strategy)
}

::google::protobuf::uint8* intersection_recognition_strategy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.intersection_recognition_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // bool debug_log = 2;
  if (this->debug_log() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->debug_log(), target);
  }

  // float speed_limit = 3;
  if (this->speed_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed_limit(), target);
  }

  // .xpilot.sr2_0.proto.drive_into_condition drive_into_condition = 4;
  if (this->has_drive_into_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->drive_into_condition_, deterministic, target);
  }

  // .xpilot.sr2_0.proto.drive_out_condition drive_out_condition = 5;
  if (this->has_drive_out_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->drive_out_condition_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.intersection_recognition_strategy)
  return target;
}

size_t intersection_recognition_strategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.intersection_recognition_strategy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .xpilot.sr2_0.proto.drive_into_condition drive_into_condition = 4;
  if (this->has_drive_into_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->drive_into_condition_);
  }

  // .xpilot.sr2_0.proto.drive_out_condition drive_out_condition = 5;
  if (this->has_drive_out_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->drive_out_condition_);
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool debug_log = 2;
  if (this->debug_log() != 0) {
    total_size += 1 + 1;
  }

  // float speed_limit = 3;
  if (this->speed_limit() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void intersection_recognition_strategy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.intersection_recognition_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  const intersection_recognition_strategy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const intersection_recognition_strategy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.intersection_recognition_strategy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.intersection_recognition_strategy)
    MergeFrom(*source);
  }
}

void intersection_recognition_strategy::MergeFrom(const intersection_recognition_strategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.intersection_recognition_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_drive_into_condition()) {
    mutable_drive_into_condition()->::xpilot::sr2_0::proto::drive_into_condition::MergeFrom(from.drive_into_condition());
  }
  if (from.has_drive_out_condition()) {
    mutable_drive_out_condition()->::xpilot::sr2_0::proto::drive_out_condition::MergeFrom(from.drive_out_condition());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.debug_log() != 0) {
    set_debug_log(from.debug_log());
  }
  if (from.speed_limit() != 0) {
    set_speed_limit(from.speed_limit());
  }
}

void intersection_recognition_strategy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.intersection_recognition_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void intersection_recognition_strategy::CopyFrom(const intersection_recognition_strategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.intersection_recognition_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool intersection_recognition_strategy::IsInitialized() const {
  return true;
}

void intersection_recognition_strategy::Swap(intersection_recognition_strategy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void intersection_recognition_strategy::InternalSwap(intersection_recognition_strategy* other) {
  using std::swap;
  swap(drive_into_condition_, other->drive_into_condition_);
  swap(drive_out_condition_, other->drive_out_condition_);
  swap(enable_, other->enable_);
  swap(debug_log_, other->debug_log_);
  swap(speed_limit_, other->speed_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata intersection_recognition_strategy::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void drive_into_condition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int drive_into_condition::kDistRoadMarkFieldNumber;
const int drive_into_condition::kLengthRoadMarkFieldNumber;
const int drive_into_condition::kWidthLaneFieldNumber;
const int drive_into_condition::kLengthSearchLanelineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

drive_into_condition::drive_into_condition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultsdrive_into_condition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.drive_into_condition)
}
drive_into_condition::drive_into_condition(const drive_into_condition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dist_road_mark_, &from.dist_road_mark_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_search_laneline_) -
    reinterpret_cast<char*>(&dist_road_mark_)) + sizeof(length_search_laneline_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.drive_into_condition)
}

void drive_into_condition::SharedCtor() {
  ::memset(&dist_road_mark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_search_laneline_) -
      reinterpret_cast<char*>(&dist_road_mark_)) + sizeof(length_search_laneline_));
  _cached_size_ = 0;
}

drive_into_condition::~drive_into_condition() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.drive_into_condition)
  SharedDtor();
}

void drive_into_condition::SharedDtor() {
}

void drive_into_condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* drive_into_condition::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const drive_into_condition& drive_into_condition::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultsdrive_into_condition();
  return *internal_default_instance();
}

drive_into_condition* drive_into_condition::New(::google::protobuf::Arena* arena) const {
  drive_into_condition* n = new drive_into_condition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void drive_into_condition::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.drive_into_condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dist_road_mark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_search_laneline_) -
      reinterpret_cast<char*>(&dist_road_mark_)) + sizeof(length_search_laneline_));
  _internal_metadata_.Clear();
}

bool drive_into_condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.drive_into_condition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float dist_road_mark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dist_road_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length_road_mark = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_road_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width_lane = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 length_search_laneline = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_search_laneline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.drive_into_condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.drive_into_condition)
  return false;
#undef DO_
}

void drive_into_condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.drive_into_condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dist_road_mark = 1;
  if (this->dist_road_mark() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dist_road_mark(), output);
  }

  // float length_road_mark = 2;
  if (this->length_road_mark() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->length_road_mark(), output);
  }

  // float width_lane = 3;
  if (this->width_lane() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width_lane(), output);
  }

  // uint32 length_search_laneline = 4;
  if (this->length_search_laneline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->length_search_laneline(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.drive_into_condition)
}

::google::protobuf::uint8* drive_into_condition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.drive_into_condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dist_road_mark = 1;
  if (this->dist_road_mark() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dist_road_mark(), target);
  }

  // float length_road_mark = 2;
  if (this->length_road_mark() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->length_road_mark(), target);
  }

  // float width_lane = 3;
  if (this->width_lane() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width_lane(), target);
  }

  // uint32 length_search_laneline = 4;
  if (this->length_search_laneline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->length_search_laneline(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.drive_into_condition)
  return target;
}

size_t drive_into_condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.drive_into_condition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float dist_road_mark = 1;
  if (this->dist_road_mark() != 0) {
    total_size += 1 + 4;
  }

  // float length_road_mark = 2;
  if (this->length_road_mark() != 0) {
    total_size += 1 + 4;
  }

  // float width_lane = 3;
  if (this->width_lane() != 0) {
    total_size += 1 + 4;
  }

  // uint32 length_search_laneline = 4;
  if (this->length_search_laneline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length_search_laneline());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void drive_into_condition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.drive_into_condition)
  GOOGLE_DCHECK_NE(&from, this);
  const drive_into_condition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const drive_into_condition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.drive_into_condition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.drive_into_condition)
    MergeFrom(*source);
  }
}

void drive_into_condition::MergeFrom(const drive_into_condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.drive_into_condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dist_road_mark() != 0) {
    set_dist_road_mark(from.dist_road_mark());
  }
  if (from.length_road_mark() != 0) {
    set_length_road_mark(from.length_road_mark());
  }
  if (from.width_lane() != 0) {
    set_width_lane(from.width_lane());
  }
  if (from.length_search_laneline() != 0) {
    set_length_search_laneline(from.length_search_laneline());
  }
}

void drive_into_condition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.drive_into_condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void drive_into_condition::CopyFrom(const drive_into_condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.drive_into_condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool drive_into_condition::IsInitialized() const {
  return true;
}

void drive_into_condition::Swap(drive_into_condition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void drive_into_condition::InternalSwap(drive_into_condition* other) {
  using std::swap;
  swap(dist_road_mark_, other->dist_road_mark_);
  swap(length_road_mark_, other->length_road_mark_);
  swap(width_lane_, other->width_lane_);
  swap(length_search_laneline_, other->length_search_laneline_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata drive_into_condition::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void drive_out_condition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int drive_out_condition::kDistEgoDriveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

drive_out_condition::drive_out_condition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultsdrive_out_condition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.drive_out_condition)
}
drive_out_condition::drive_out_condition(const drive_out_condition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dist_ego_drive_ = from.dist_ego_drive_;
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.drive_out_condition)
}

void drive_out_condition::SharedCtor() {
  dist_ego_drive_ = 0u;
  _cached_size_ = 0;
}

drive_out_condition::~drive_out_condition() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.drive_out_condition)
  SharedDtor();
}

void drive_out_condition::SharedDtor() {
}

void drive_out_condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* drive_out_condition::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const drive_out_condition& drive_out_condition::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultsdrive_out_condition();
  return *internal_default_instance();
}

drive_out_condition* drive_out_condition::New(::google::protobuf::Arena* arena) const {
  drive_out_condition* n = new drive_out_condition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void drive_out_condition::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.drive_out_condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dist_ego_drive_ = 0u;
  _internal_metadata_.Clear();
}

bool drive_out_condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.drive_out_condition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dist_ego_drive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dist_ego_drive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.drive_out_condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.drive_out_condition)
  return false;
#undef DO_
}

void drive_out_condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.drive_out_condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dist_ego_drive = 1;
  if (this->dist_ego_drive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dist_ego_drive(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.drive_out_condition)
}

::google::protobuf::uint8* drive_out_condition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.drive_out_condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dist_ego_drive = 1;
  if (this->dist_ego_drive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dist_ego_drive(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.drive_out_condition)
  return target;
}

size_t drive_out_condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.drive_out_condition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dist_ego_drive = 1;
  if (this->dist_ego_drive() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dist_ego_drive());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void drive_out_condition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.drive_out_condition)
  GOOGLE_DCHECK_NE(&from, this);
  const drive_out_condition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const drive_out_condition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.drive_out_condition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.drive_out_condition)
    MergeFrom(*source);
  }
}

void drive_out_condition::MergeFrom(const drive_out_condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.drive_out_condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dist_ego_drive() != 0) {
    set_dist_ego_drive(from.dist_ego_drive());
  }
}

void drive_out_condition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.drive_out_condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void drive_out_condition::CopyFrom(const drive_out_condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.drive_out_condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool drive_out_condition::IsInitialized() const {
  return true;
}

void drive_out_condition::Swap(drive_out_condition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void drive_out_condition::InternalSwap(drive_out_condition* other) {
  using std::swap;
  swap(dist_ego_drive_, other->dist_ego_drive_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata drive_out_condition::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void signal_light_status_strategy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int signal_light_status_strategy::kOpenFieldNumber;
const int signal_light_status_strategy::kYawDirctionDebugFieldNumber;
const int signal_light_status_strategy::kYawDirctionLeftFieldNumber;
const int signal_light_status_strategy::kYawDirctionRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

signal_light_status_strategy::signal_light_status_strategy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultssignal_light_status_strategy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.signal_light_status_strategy)
}
signal_light_status_strategy::signal_light_status_strategy(const signal_light_status_strategy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_dirction_right_) -
    reinterpret_cast<char*>(&open_)) + sizeof(yaw_dirction_right_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.signal_light_status_strategy)
}

void signal_light_status_strategy::SharedCtor() {
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_dirction_right_) -
      reinterpret_cast<char*>(&open_)) + sizeof(yaw_dirction_right_));
  _cached_size_ = 0;
}

signal_light_status_strategy::~signal_light_status_strategy() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.signal_light_status_strategy)
  SharedDtor();
}

void signal_light_status_strategy::SharedDtor() {
}

void signal_light_status_strategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* signal_light_status_strategy::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const signal_light_status_strategy& signal_light_status_strategy::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultssignal_light_status_strategy();
  return *internal_default_instance();
}

signal_light_status_strategy* signal_light_status_strategy::New(::google::protobuf::Arena* arena) const {
  signal_light_status_strategy* n = new signal_light_status_strategy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void signal_light_status_strategy::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.signal_light_status_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_dirction_right_) -
      reinterpret_cast<char*>(&open_)) + sizeof(yaw_dirction_right_));
  _internal_metadata_.Clear();
}

bool signal_light_status_strategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.signal_light_status_strategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool open = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool yaw_dirction_debug = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yaw_dirction_debug_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_dirction_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_dirction_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_dirction_right = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_dirction_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.signal_light_status_strategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.signal_light_status_strategy)
  return false;
#undef DO_
}

void signal_light_status_strategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.signal_light_status_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->open(), output);
  }

  // bool yaw_dirction_debug = 2;
  if (this->yaw_dirction_debug() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->yaw_dirction_debug(), output);
  }

  // float yaw_dirction_left = 3;
  if (this->yaw_dirction_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw_dirction_left(), output);
  }

  // float yaw_dirction_right = 4;
  if (this->yaw_dirction_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw_dirction_right(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.signal_light_status_strategy)
}

::google::protobuf::uint8* signal_light_status_strategy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.signal_light_status_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->open(), target);
  }

  // bool yaw_dirction_debug = 2;
  if (this->yaw_dirction_debug() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->yaw_dirction_debug(), target);
  }

  // float yaw_dirction_left = 3;
  if (this->yaw_dirction_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw_dirction_left(), target);
  }

  // float yaw_dirction_right = 4;
  if (this->yaw_dirction_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yaw_dirction_right(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.signal_light_status_strategy)
  return target;
}

size_t signal_light_status_strategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.signal_light_status_strategy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool open = 1;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  // bool yaw_dirction_debug = 2;
  if (this->yaw_dirction_debug() != 0) {
    total_size += 1 + 1;
  }

  // float yaw_dirction_left = 3;
  if (this->yaw_dirction_left() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_dirction_right = 4;
  if (this->yaw_dirction_right() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void signal_light_status_strategy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.signal_light_status_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  const signal_light_status_strategy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const signal_light_status_strategy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.signal_light_status_strategy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.signal_light_status_strategy)
    MergeFrom(*source);
  }
}

void signal_light_status_strategy::MergeFrom(const signal_light_status_strategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.signal_light_status_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.yaw_dirction_debug() != 0) {
    set_yaw_dirction_debug(from.yaw_dirction_debug());
  }
  if (from.yaw_dirction_left() != 0) {
    set_yaw_dirction_left(from.yaw_dirction_left());
  }
  if (from.yaw_dirction_right() != 0) {
    set_yaw_dirction_right(from.yaw_dirction_right());
  }
}

void signal_light_status_strategy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.signal_light_status_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signal_light_status_strategy::CopyFrom(const signal_light_status_strategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.signal_light_status_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signal_light_status_strategy::IsInitialized() const {
  return true;
}

void signal_light_status_strategy::Swap(signal_light_status_strategy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void signal_light_status_strategy::InternalSwap(signal_light_status_strategy* other) {
  using std::swap;
  swap(open_, other->open_);
  swap(yaw_dirction_debug_, other->yaw_dirction_debug_);
  swap(yaw_dirction_left_, other->yaw_dirction_left_);
  swap(yaw_dirction_right_, other->yaw_dirction_right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata signal_light_status_strategy::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cache_pool_dynamic_strategy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cache_pool_dynamic_strategy::kOpenFieldNumber;
const int cache_pool_dynamic_strategy::kYawDirctionDebugFieldNumber;
const int cache_pool_dynamic_strategy::kYawDirctionLeftFieldNumber;
const int cache_pool_dynamic_strategy::kYawDirctionRightFieldNumber;
const int cache_pool_dynamic_strategy::kRunCacheCountFieldNumber;
const int cache_pool_dynamic_strategy::kStopCacheCountFieldNumber;
const int cache_pool_dynamic_strategy::kSelfVehicleStopSpeedFieldNumber;
const int cache_pool_dynamic_strategy::kUnionRateMinFieldNumber;
const int cache_pool_dynamic_strategy::kUpdateMaxVelocityFieldNumber;
const int cache_pool_dynamic_strategy::kUpdateMaxDistanceFieldNumber;
const int cache_pool_dynamic_strategy::kCheckDeltaDistFieldNumber;
const int cache_pool_dynamic_strategy::kCheckDeltaTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cache_pool_dynamic_strategy::cache_pool_dynamic_strategy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultscache_pool_dynamic_strategy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
}
cache_pool_dynamic_strategy::cache_pool_dynamic_strategy(const cache_pool_dynamic_strategy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&check_delta_time_) -
    reinterpret_cast<char*>(&open_)) + sizeof(check_delta_time_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
}

void cache_pool_dynamic_strategy::SharedCtor() {
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_delta_time_) -
      reinterpret_cast<char*>(&open_)) + sizeof(check_delta_time_));
  _cached_size_ = 0;
}

cache_pool_dynamic_strategy::~cache_pool_dynamic_strategy() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  SharedDtor();
}

void cache_pool_dynamic_strategy::SharedDtor() {
}

void cache_pool_dynamic_strategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cache_pool_dynamic_strategy::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cache_pool_dynamic_strategy& cache_pool_dynamic_strategy::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultscache_pool_dynamic_strategy();
  return *internal_default_instance();
}

cache_pool_dynamic_strategy* cache_pool_dynamic_strategy::New(::google::protobuf::Arena* arena) const {
  cache_pool_dynamic_strategy* n = new cache_pool_dynamic_strategy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cache_pool_dynamic_strategy::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_delta_time_) -
      reinterpret_cast<char*>(&open_)) + sizeof(check_delta_time_));
  _internal_metadata_.Clear();
}

bool cache_pool_dynamic_strategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool open = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool yaw_dirction_debug = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yaw_dirction_debug_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_dirction_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_dirction_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_dirction_right = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_dirction_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 run_cache_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &run_cache_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stop_cache_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_cache_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float self_vehicle_stop_speed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &self_vehicle_stop_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float union_rate_min = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &union_rate_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float update_max_velocity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &update_max_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float update_max_distance = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &update_max_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float check_delta_dist = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &check_delta_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float check_delta_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &check_delta_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  return false;
#undef DO_
}

void cache_pool_dynamic_strategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->open(), output);
  }

  // bool yaw_dirction_debug = 2;
  if (this->yaw_dirction_debug() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->yaw_dirction_debug(), output);
  }

  // float yaw_dirction_left = 3;
  if (this->yaw_dirction_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw_dirction_left(), output);
  }

  // float yaw_dirction_right = 4;
  if (this->yaw_dirction_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw_dirction_right(), output);
  }

  // uint32 run_cache_count = 5;
  if (this->run_cache_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->run_cache_count(), output);
  }

  // uint32 stop_cache_count = 6;
  if (this->stop_cache_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stop_cache_count(), output);
  }

  // float self_vehicle_stop_speed = 7;
  if (this->self_vehicle_stop_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->self_vehicle_stop_speed(), output);
  }

  // float union_rate_min = 8;
  if (this->union_rate_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->union_rate_min(), output);
  }

  // float update_max_velocity = 9;
  if (this->update_max_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->update_max_velocity(), output);
  }

  // float update_max_distance = 10;
  if (this->update_max_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->update_max_distance(), output);
  }

  // float check_delta_dist = 11;
  if (this->check_delta_dist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->check_delta_dist(), output);
  }

  // float check_delta_time = 12;
  if (this->check_delta_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->check_delta_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
}

::google::protobuf::uint8* cache_pool_dynamic_strategy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->open(), target);
  }

  // bool yaw_dirction_debug = 2;
  if (this->yaw_dirction_debug() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->yaw_dirction_debug(), target);
  }

  // float yaw_dirction_left = 3;
  if (this->yaw_dirction_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw_dirction_left(), target);
  }

  // float yaw_dirction_right = 4;
  if (this->yaw_dirction_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yaw_dirction_right(), target);
  }

  // uint32 run_cache_count = 5;
  if (this->run_cache_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->run_cache_count(), target);
  }

  // uint32 stop_cache_count = 6;
  if (this->stop_cache_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stop_cache_count(), target);
  }

  // float self_vehicle_stop_speed = 7;
  if (this->self_vehicle_stop_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->self_vehicle_stop_speed(), target);
  }

  // float union_rate_min = 8;
  if (this->union_rate_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->union_rate_min(), target);
  }

  // float update_max_velocity = 9;
  if (this->update_max_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->update_max_velocity(), target);
  }

  // float update_max_distance = 10;
  if (this->update_max_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->update_max_distance(), target);
  }

  // float check_delta_dist = 11;
  if (this->check_delta_dist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->check_delta_dist(), target);
  }

  // float check_delta_time = 12;
  if (this->check_delta_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->check_delta_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  return target;
}

size_t cache_pool_dynamic_strategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool open = 1;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  // bool yaw_dirction_debug = 2;
  if (this->yaw_dirction_debug() != 0) {
    total_size += 1 + 1;
  }

  // float yaw_dirction_left = 3;
  if (this->yaw_dirction_left() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_dirction_right = 4;
  if (this->yaw_dirction_right() != 0) {
    total_size += 1 + 4;
  }

  // uint32 run_cache_count = 5;
  if (this->run_cache_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->run_cache_count());
  }

  // uint32 stop_cache_count = 6;
  if (this->stop_cache_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stop_cache_count());
  }

  // float self_vehicle_stop_speed = 7;
  if (this->self_vehicle_stop_speed() != 0) {
    total_size += 1 + 4;
  }

  // float union_rate_min = 8;
  if (this->union_rate_min() != 0) {
    total_size += 1 + 4;
  }

  // float update_max_velocity = 9;
  if (this->update_max_velocity() != 0) {
    total_size += 1 + 4;
  }

  // float update_max_distance = 10;
  if (this->update_max_distance() != 0) {
    total_size += 1 + 4;
  }

  // float check_delta_dist = 11;
  if (this->check_delta_dist() != 0) {
    total_size += 1 + 4;
  }

  // float check_delta_time = 12;
  if (this->check_delta_time() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cache_pool_dynamic_strategy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  const cache_pool_dynamic_strategy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cache_pool_dynamic_strategy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
    MergeFrom(*source);
  }
}

void cache_pool_dynamic_strategy::MergeFrom(const cache_pool_dynamic_strategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.yaw_dirction_debug() != 0) {
    set_yaw_dirction_debug(from.yaw_dirction_debug());
  }
  if (from.yaw_dirction_left() != 0) {
    set_yaw_dirction_left(from.yaw_dirction_left());
  }
  if (from.yaw_dirction_right() != 0) {
    set_yaw_dirction_right(from.yaw_dirction_right());
  }
  if (from.run_cache_count() != 0) {
    set_run_cache_count(from.run_cache_count());
  }
  if (from.stop_cache_count() != 0) {
    set_stop_cache_count(from.stop_cache_count());
  }
  if (from.self_vehicle_stop_speed() != 0) {
    set_self_vehicle_stop_speed(from.self_vehicle_stop_speed());
  }
  if (from.union_rate_min() != 0) {
    set_union_rate_min(from.union_rate_min());
  }
  if (from.update_max_velocity() != 0) {
    set_update_max_velocity(from.update_max_velocity());
  }
  if (from.update_max_distance() != 0) {
    set_update_max_distance(from.update_max_distance());
  }
  if (from.check_delta_dist() != 0) {
    set_check_delta_dist(from.check_delta_dist());
  }
  if (from.check_delta_time() != 0) {
    set_check_delta_time(from.check_delta_time());
  }
}

void cache_pool_dynamic_strategy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cache_pool_dynamic_strategy::CopyFrom(const cache_pool_dynamic_strategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.cache_pool_dynamic_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cache_pool_dynamic_strategy::IsInitialized() const {
  return true;
}

void cache_pool_dynamic_strategy::Swap(cache_pool_dynamic_strategy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cache_pool_dynamic_strategy::InternalSwap(cache_pool_dynamic_strategy* other) {
  using std::swap;
  swap(open_, other->open_);
  swap(yaw_dirction_debug_, other->yaw_dirction_debug_);
  swap(yaw_dirction_left_, other->yaw_dirction_left_);
  swap(yaw_dirction_right_, other->yaw_dirction_right_);
  swap(run_cache_count_, other->run_cache_count_);
  swap(stop_cache_count_, other->stop_cache_count_);
  swap(self_vehicle_stop_speed_, other->self_vehicle_stop_speed_);
  swap(union_rate_min_, other->union_rate_min_);
  swap(update_max_velocity_, other->update_max_velocity_);
  swap(update_max_distance_, other->update_max_distance_);
  swap(check_delta_dist_, other->check_delta_dist_);
  swap(check_delta_time_, other->check_delta_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cache_pool_dynamic_strategy::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cache_pool_static_strategy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cache_pool_static_strategy::kOpenFieldNumber;
const int cache_pool_static_strategy::kOpenSodFieldNumber;
const int cache_pool_static_strategy::kCacheCountFieldNumber;
const int cache_pool_static_strategy::kMinDistFieldNumber;
const int cache_pool_static_strategy::kCheckDeltaDistFieldNumber;
const int cache_pool_static_strategy::kCheckDeltaTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cache_pool_static_strategy::cache_pool_static_strategy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultscache_pool_static_strategy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.cache_pool_static_strategy)
}
cache_pool_static_strategy::cache_pool_static_strategy(const cache_pool_static_strategy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&check_delta_time_) -
    reinterpret_cast<char*>(&open_)) + sizeof(check_delta_time_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.cache_pool_static_strategy)
}

void cache_pool_static_strategy::SharedCtor() {
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_delta_time_) -
      reinterpret_cast<char*>(&open_)) + sizeof(check_delta_time_));
  _cached_size_ = 0;
}

cache_pool_static_strategy::~cache_pool_static_strategy() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.cache_pool_static_strategy)
  SharedDtor();
}

void cache_pool_static_strategy::SharedDtor() {
}

void cache_pool_static_strategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cache_pool_static_strategy::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cache_pool_static_strategy& cache_pool_static_strategy::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultscache_pool_static_strategy();
  return *internal_default_instance();
}

cache_pool_static_strategy* cache_pool_static_strategy::New(::google::protobuf::Arena* arena) const {
  cache_pool_static_strategy* n = new cache_pool_static_strategy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cache_pool_static_strategy::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.cache_pool_static_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_delta_time_) -
      reinterpret_cast<char*>(&open_)) + sizeof(check_delta_time_));
  _internal_metadata_.Clear();
}

bool cache_pool_static_strategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.cache_pool_static_strategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool open = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool open_sod = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_sod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cache_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cache_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_dist = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float check_delta_dist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &check_delta_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float check_delta_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &check_delta_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.cache_pool_static_strategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.cache_pool_static_strategy)
  return false;
#undef DO_
}

void cache_pool_static_strategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.cache_pool_static_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->open(), output);
  }

  // bool open_sod = 2;
  if (this->open_sod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->open_sod(), output);
  }

  // uint32 cache_count = 3;
  if (this->cache_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cache_count(), output);
  }

  // float min_dist = 4;
  if (this->min_dist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_dist(), output);
  }

  // float check_delta_dist = 5;
  if (this->check_delta_dist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->check_delta_dist(), output);
  }

  // float check_delta_time = 6;
  if (this->check_delta_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->check_delta_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.cache_pool_static_strategy)
}

::google::protobuf::uint8* cache_pool_static_strategy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.cache_pool_static_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->open(), target);
  }

  // bool open_sod = 2;
  if (this->open_sod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->open_sod(), target);
  }

  // uint32 cache_count = 3;
  if (this->cache_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cache_count(), target);
  }

  // float min_dist = 4;
  if (this->min_dist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_dist(), target);
  }

  // float check_delta_dist = 5;
  if (this->check_delta_dist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->check_delta_dist(), target);
  }

  // float check_delta_time = 6;
  if (this->check_delta_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->check_delta_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.cache_pool_static_strategy)
  return target;
}

size_t cache_pool_static_strategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.cache_pool_static_strategy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool open = 1;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  // bool open_sod = 2;
  if (this->open_sod() != 0) {
    total_size += 1 + 1;
  }

  // uint32 cache_count = 3;
  if (this->cache_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cache_count());
  }

  // float min_dist = 4;
  if (this->min_dist() != 0) {
    total_size += 1 + 4;
  }

  // float check_delta_dist = 5;
  if (this->check_delta_dist() != 0) {
    total_size += 1 + 4;
  }

  // float check_delta_time = 6;
  if (this->check_delta_time() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cache_pool_static_strategy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.cache_pool_static_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  const cache_pool_static_strategy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cache_pool_static_strategy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.cache_pool_static_strategy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.cache_pool_static_strategy)
    MergeFrom(*source);
  }
}

void cache_pool_static_strategy::MergeFrom(const cache_pool_static_strategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.cache_pool_static_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.open_sod() != 0) {
    set_open_sod(from.open_sod());
  }
  if (from.cache_count() != 0) {
    set_cache_count(from.cache_count());
  }
  if (from.min_dist() != 0) {
    set_min_dist(from.min_dist());
  }
  if (from.check_delta_dist() != 0) {
    set_check_delta_dist(from.check_delta_dist());
  }
  if (from.check_delta_time() != 0) {
    set_check_delta_time(from.check_delta_time());
  }
}

void cache_pool_static_strategy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.cache_pool_static_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cache_pool_static_strategy::CopyFrom(const cache_pool_static_strategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.cache_pool_static_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cache_pool_static_strategy::IsInitialized() const {
  return true;
}

void cache_pool_static_strategy::Swap(cache_pool_static_strategy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cache_pool_static_strategy::InternalSwap(cache_pool_static_strategy* other) {
  using std::swap;
  swap(open_, other->open_);
  swap(open_sod_, other->open_sod_);
  swap(cache_count_, other->cache_count_);
  swap(min_dist_, other->min_dist_);
  swap(check_delta_dist_, other->check_delta_dist_);
  swap(check_delta_time_, other->check_delta_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cache_pool_static_strategy::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void dynamic_pose_filter_strategy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dynamic_pose_filter_strategy::kOpenFieldNumber;
const int dynamic_pose_filter_strategy::kCacheCountFieldNumber;
const int dynamic_pose_filter_strategy::kVehicleStopSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dynamic_pose_filter_strategy::dynamic_pose_filter_strategy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultsdynamic_pose_filter_strategy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
}
dynamic_pose_filter_strategy::dynamic_pose_filter_strategy(const dynamic_pose_filter_strategy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_stop_speed_) -
    reinterpret_cast<char*>(&open_)) + sizeof(vehicle_stop_speed_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
}

void dynamic_pose_filter_strategy::SharedCtor() {
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_stop_speed_) -
      reinterpret_cast<char*>(&open_)) + sizeof(vehicle_stop_speed_));
  _cached_size_ = 0;
}

dynamic_pose_filter_strategy::~dynamic_pose_filter_strategy() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  SharedDtor();
}

void dynamic_pose_filter_strategy::SharedDtor() {
}

void dynamic_pose_filter_strategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dynamic_pose_filter_strategy::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dynamic_pose_filter_strategy& dynamic_pose_filter_strategy::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultsdynamic_pose_filter_strategy();
  return *internal_default_instance();
}

dynamic_pose_filter_strategy* dynamic_pose_filter_strategy::New(::google::protobuf::Arena* arena) const {
  dynamic_pose_filter_strategy* n = new dynamic_pose_filter_strategy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dynamic_pose_filter_strategy::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_stop_speed_) -
      reinterpret_cast<char*>(&open_)) + sizeof(vehicle_stop_speed_));
  _internal_metadata_.Clear();
}

bool dynamic_pose_filter_strategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool open = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cache_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cache_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vehicle_stop_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicle_stop_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  return false;
#undef DO_
}

void dynamic_pose_filter_strategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->open(), output);
  }

  // uint32 cache_count = 2;
  if (this->cache_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cache_count(), output);
  }

  // float vehicle_stop_speed = 3;
  if (this->vehicle_stop_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->vehicle_stop_speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
}

::google::protobuf::uint8* dynamic_pose_filter_strategy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->open(), target);
  }

  // uint32 cache_count = 2;
  if (this->cache_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cache_count(), target);
  }

  // float vehicle_stop_speed = 3;
  if (this->vehicle_stop_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->vehicle_stop_speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  return target;
}

size_t dynamic_pose_filter_strategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool open = 1;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  // uint32 cache_count = 2;
  if (this->cache_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cache_count());
  }

  // float vehicle_stop_speed = 3;
  if (this->vehicle_stop_speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dynamic_pose_filter_strategy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  const dynamic_pose_filter_strategy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dynamic_pose_filter_strategy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
    MergeFrom(*source);
  }
}

void dynamic_pose_filter_strategy::MergeFrom(const dynamic_pose_filter_strategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.cache_count() != 0) {
    set_cache_count(from.cache_count());
  }
  if (from.vehicle_stop_speed() != 0) {
    set_vehicle_stop_speed(from.vehicle_stop_speed());
  }
}

void dynamic_pose_filter_strategy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dynamic_pose_filter_strategy::CopyFrom(const dynamic_pose_filter_strategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.dynamic_pose_filter_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dynamic_pose_filter_strategy::IsInitialized() const {
  return true;
}

void dynamic_pose_filter_strategy::Swap(dynamic_pose_filter_strategy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dynamic_pose_filter_strategy::InternalSwap(dynamic_pose_filter_strategy* other) {
  using std::swap;
  swap(open_, other->open_);
  swap(cache_count_, other->cache_count_);
  swap(vehicle_stop_speed_, other->vehicle_stop_speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dynamic_pose_filter_strategy::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void lane_line_omit_frame_strategy::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_lane_line_omit_frame_strategy_default_instance_._instance.get_mutable()->low_speed_case_ = const_cast< ::xpilot::sr2_0::proto::low_speed_case*>(
      ::xpilot::sr2_0::proto::low_speed_case::internal_default_instance());
  ::xpilot::sr2_0::proto::_lane_line_omit_frame_strategy_default_instance_._instance.get_mutable()->static_case_ = const_cast< ::xpilot::sr2_0::proto::static_case*>(
      ::xpilot::sr2_0::proto::static_case::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lane_line_omit_frame_strategy::kEnableFieldNumber;
const int lane_line_omit_frame_strategy::kLowSpeedCaseFieldNumber;
const int lane_line_omit_frame_strategy::kStaticCaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lane_line_omit_frame_strategy::lane_line_omit_frame_strategy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultslane_line_omit_frame_strategy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
}
lane_line_omit_frame_strategy::lane_line_omit_frame_strategy(const lane_line_omit_frame_strategy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_low_speed_case()) {
    low_speed_case_ = new ::xpilot::sr2_0::proto::low_speed_case(*from.low_speed_case_);
  } else {
    low_speed_case_ = NULL;
  }
  if (from.has_static_case()) {
    static_case_ = new ::xpilot::sr2_0::proto::static_case(*from.static_case_);
  } else {
    static_case_ = NULL;
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
}

void lane_line_omit_frame_strategy::SharedCtor() {
  ::memset(&low_speed_case_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&low_speed_case_)) + sizeof(enable_));
  _cached_size_ = 0;
}

lane_line_omit_frame_strategy::~lane_line_omit_frame_strategy() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  SharedDtor();
}

void lane_line_omit_frame_strategy::SharedDtor() {
  if (this != internal_default_instance()) delete low_speed_case_;
  if (this != internal_default_instance()) delete static_case_;
}

void lane_line_omit_frame_strategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lane_line_omit_frame_strategy::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const lane_line_omit_frame_strategy& lane_line_omit_frame_strategy::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultslane_line_omit_frame_strategy();
  return *internal_default_instance();
}

lane_line_omit_frame_strategy* lane_line_omit_frame_strategy::New(::google::protobuf::Arena* arena) const {
  lane_line_omit_frame_strategy* n = new lane_line_omit_frame_strategy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void lane_line_omit_frame_strategy::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && low_speed_case_ != NULL) {
    delete low_speed_case_;
  }
  low_speed_case_ = NULL;
  if (GetArenaNoVirtual() == NULL && static_case_ != NULL) {
    delete static_case_;
  }
  static_case_ = NULL;
  enable_ = false;
  _internal_metadata_.Clear();
}

bool lane_line_omit_frame_strategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xpilot.sr2_0.proto.low_speed_case low_speed_case = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_low_speed_case()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xpilot.sr2_0.proto.static_case static_case = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_static_case()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  return false;
#undef DO_
}

void lane_line_omit_frame_strategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // .xpilot.sr2_0.proto.low_speed_case low_speed_case = 2;
  if (this->has_low_speed_case()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->low_speed_case_, output);
  }

  // .xpilot.sr2_0.proto.static_case static_case = 3;
  if (this->has_static_case()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->static_case_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
}

::google::protobuf::uint8* lane_line_omit_frame_strategy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // .xpilot.sr2_0.proto.low_speed_case low_speed_case = 2;
  if (this->has_low_speed_case()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->low_speed_case_, deterministic, target);
  }

  // .xpilot.sr2_0.proto.static_case static_case = 3;
  if (this->has_static_case()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->static_case_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  return target;
}

size_t lane_line_omit_frame_strategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .xpilot.sr2_0.proto.low_speed_case low_speed_case = 2;
  if (this->has_low_speed_case()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->low_speed_case_);
  }

  // .xpilot.sr2_0.proto.static_case static_case = 3;
  if (this->has_static_case()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->static_case_);
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lane_line_omit_frame_strategy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  const lane_line_omit_frame_strategy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lane_line_omit_frame_strategy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
    MergeFrom(*source);
  }
}

void lane_line_omit_frame_strategy::MergeFrom(const lane_line_omit_frame_strategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_low_speed_case()) {
    mutable_low_speed_case()->::xpilot::sr2_0::proto::low_speed_case::MergeFrom(from.low_speed_case());
  }
  if (from.has_static_case()) {
    mutable_static_case()->::xpilot::sr2_0::proto::static_case::MergeFrom(from.static_case());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
}

void lane_line_omit_frame_strategy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lane_line_omit_frame_strategy::CopyFrom(const lane_line_omit_frame_strategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.lane_line_omit_frame_strategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lane_line_omit_frame_strategy::IsInitialized() const {
  return true;
}

void lane_line_omit_frame_strategy::Swap(lane_line_omit_frame_strategy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lane_line_omit_frame_strategy::InternalSwap(lane_line_omit_frame_strategy* other) {
  using std::swap;
  swap(low_speed_case_, other->low_speed_case_);
  swap(static_case_, other->static_case_);
  swap(enable_, other->enable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata lane_line_omit_frame_strategy::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void low_speed_case::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int low_speed_case::kFrameCountFieldNumber;
const int low_speed_case::kSpeedCeilingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

low_speed_case::low_speed_case()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultslow_speed_case();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.low_speed_case)
}
low_speed_case::low_speed_case(const low_speed_case& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frame_count_, &from.frame_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_ceiling_) -
    reinterpret_cast<char*>(&frame_count_)) + sizeof(speed_ceiling_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.low_speed_case)
}

void low_speed_case::SharedCtor() {
  ::memset(&frame_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_ceiling_) -
      reinterpret_cast<char*>(&frame_count_)) + sizeof(speed_ceiling_));
  _cached_size_ = 0;
}

low_speed_case::~low_speed_case() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.low_speed_case)
  SharedDtor();
}

void low_speed_case::SharedDtor() {
}

void low_speed_case::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* low_speed_case::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const low_speed_case& low_speed_case::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultslow_speed_case();
  return *internal_default_instance();
}

low_speed_case* low_speed_case::New(::google::protobuf::Arena* arena) const {
  low_speed_case* n = new low_speed_case;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void low_speed_case::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.low_speed_case)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&frame_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_ceiling_) -
      reinterpret_cast<char*>(&frame_count_)) + sizeof(speed_ceiling_));
  _internal_metadata_.Clear();
}

bool low_speed_case::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.low_speed_case)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 frame_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_ceiling = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_ceiling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.low_speed_case)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.low_speed_case)
  return false;
#undef DO_
}

void low_speed_case::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.low_speed_case)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_count = 1;
  if (this->frame_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_count(), output);
  }

  // float speed_ceiling = 2;
  if (this->speed_ceiling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed_ceiling(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.low_speed_case)
}

::google::protobuf::uint8* low_speed_case::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.low_speed_case)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_count = 1;
  if (this->frame_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_count(), target);
  }

  // float speed_ceiling = 2;
  if (this->speed_ceiling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed_ceiling(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.low_speed_case)
  return target;
}

size_t low_speed_case::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.low_speed_case)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 frame_count = 1;
  if (this->frame_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_count());
  }

  // float speed_ceiling = 2;
  if (this->speed_ceiling() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void low_speed_case::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.low_speed_case)
  GOOGLE_DCHECK_NE(&from, this);
  const low_speed_case* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const low_speed_case>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.low_speed_case)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.low_speed_case)
    MergeFrom(*source);
  }
}

void low_speed_case::MergeFrom(const low_speed_case& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.low_speed_case)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_count() != 0) {
    set_frame_count(from.frame_count());
  }
  if (from.speed_ceiling() != 0) {
    set_speed_ceiling(from.speed_ceiling());
  }
}

void low_speed_case::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.low_speed_case)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void low_speed_case::CopyFrom(const low_speed_case& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.low_speed_case)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool low_speed_case::IsInitialized() const {
  return true;
}

void low_speed_case::Swap(low_speed_case* other) {
  if (other == this) return;
  InternalSwap(other);
}
void low_speed_case::InternalSwap(low_speed_case* other) {
  using std::swap;
  swap(frame_count_, other->frame_count_);
  swap(speed_ceiling_, other->speed_ceiling_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata low_speed_case::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void static_case::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int static_case::kFrameCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

static_case::static_case()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_addressbook_2eproto::InitDefaultsstatic_case();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xpilot.sr2_0.proto.static_case)
}
static_case::static_case(const static_case& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_count_ = from.frame_count_;
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.static_case)
}

void static_case::SharedCtor() {
  frame_count_ = 0u;
  _cached_size_ = 0;
}

static_case::~static_case() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.static_case)
  SharedDtor();
}

void static_case::SharedDtor() {
}

void static_case::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* static_case::descriptor() {
  ::protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const static_case& static_case::default_instance() {
  ::protobuf_addressbook_2eproto::InitDefaultsstatic_case();
  return *internal_default_instance();
}

static_case* static_case::New(::google::protobuf::Arena* arena) const {
  static_case* n = new static_case;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void static_case::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.static_case)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_count_ = 0u;
  _internal_metadata_.Clear();
}

bool static_case::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xpilot.sr2_0.proto.static_case)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 frame_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xpilot.sr2_0.proto.static_case)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xpilot.sr2_0.proto.static_case)
  return false;
#undef DO_
}

void static_case::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xpilot.sr2_0.proto.static_case)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_count = 1;
  if (this->frame_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xpilot.sr2_0.proto.static_case)
}

::google::protobuf::uint8* static_case::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.static_case)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_count = 1;
  if (this->frame_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.static_case)
  return target;
}

size_t static_case::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.static_case)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 frame_count = 1;
  if (this->frame_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void static_case::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.static_case)
  GOOGLE_DCHECK_NE(&from, this);
  const static_case* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const static_case>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.static_case)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.static_case)
    MergeFrom(*source);
  }
}

void static_case::MergeFrom(const static_case& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.static_case)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_count() != 0) {
    set_frame_count(from.frame_count());
  }
}

void static_case::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.static_case)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void static_case::CopyFrom(const static_case& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.static_case)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool static_case::IsInitialized() const {
  return true;
}

void static_case::Swap(static_case* other) {
  if (other == this) return;
  InternalSwap(other);
}
void static_case::InternalSwap(static_case* other) {
  using std::swap;
  swap(frame_count_, other->frame_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata static_case::GetMetadata() const {
  protobuf_addressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_addressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot

// @@protoc_insertion_point(global_scope)
